[{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int i) throws SQLException {\r\n        try{\r\n            Expression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int i) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(i);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Object getObject(int i) throws SQLException {\r\n        try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Object getObject(int i) throws SQLException {\r\n        try{\r\n            Object obj = getValue(i).getObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public String getString(int i) throws SQLException {\r\n        try{\r\n            String obj = getValue(i).getString();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public BigDecimal getBigDecimal(int i, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public BigDecimal getBigDecimal(int i) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(i).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["private final void writeMagic(FileChannel raFile) throws Exception{\r\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t    buffer.putInt(MAGIC_INDEX);\r\n\t    buffer.putInt(INDEX_VERSION);\r\n\t    buffer.position(0);\r\n\t    raFile.write(buffer);\r\n\t}","private final void writeMagic(FileChannel raFile) throws Exception{\r\n\t    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n\t    buffer.putInt(MAGIC_INDEX);\r\n\t    buffer.putInt(INDEX_VERSION);\r\n\t    buffer.position(0);\r\n\t    raFile.write(buffer);\r\n\t}"]}},{"clone":{"code":["{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TINYINT),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TINYINT) ),         Utils.getInteger(3),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.TRUE,  Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BOOLEAN),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BOOLEAN) ),         Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLDATETIME),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLDATETIME) ),   Utils.getInteger(16),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCLOB) ),     \t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BINARY),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BINARY) ),   \t  \t  Utils.getInteger(65535),\t    \"0x\", null, \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NCHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NCHAR) ),           Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLMONEY),      Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLMONEY) ),      Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.REAL),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.REAL) ),        \t  Utils.getInteger(7),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARBINARY),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARBINARY) ),   \t  Utils.getInteger(65535),\t    \"0x\", null, \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), \t  Utils.getInteger(23),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIMESTAMP),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIMESTAMP) ), \t  Utils.getInteger(23),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, Utils.getInteger(3), Utils.getInteger(3), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.MONEY),           Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.MONEY) ),           Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(4), Utils.getInteger(4), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.FLOAT),        \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.FLOAT) ),           Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NVARCHAR),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NVARCHAR) ),        Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CHAR),         \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CHAR) ),         \t  Utils.getInteger(65535),   \t\"'\",  \"'\",  \"length\", \t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIT) ),             Utils.getInteger(1),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.CLOB),     \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.CLOB) ),     \t\t  Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGNVARCHAR),    Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGNVARCHAR) ),    Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.SMALLINT),        Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.SMALLINT) ),        Utils.getInteger(5),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.TIME),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.TIME) ), \t  \t\t  Utils.getInteger(8),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARBINARY),   Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARBINARY) ),   Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DECIMAL),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DECIMAL) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.VARCHAR),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.VARCHAR) ),         Utils.getInteger(65535),   \t\"'\",  \"'\",  \"max length\", \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BLOB),   \t\t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BLOB) ),   \t\t  Utils.getInteger(2147483647),\t\"0x\", null, null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.UNIQUEIDENTIFIER),Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.UNIQUEIDENTIFIER)), Utils.getInteger(36),      \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null,          Boolean.FALSE, Boolean.FALSE, null, null,                null,                null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.BIGINT),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.BIGINT) ),          Utils.getInteger(19),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DATE),   \t \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DATE) ), \t  \t\t  Utils.getInteger(10),\t    \t\"'\",  \"'\",  null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.LONGVARCHAR),     Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.LONGVARCHAR) ),     Utils.getInteger(2147483647),\t\"'\",  \"'\",  null, \t\t \t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.DOUBLE),          Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.DOUBLE) ),          Utils.getInteger(15),      \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.JAVA_OBJECT),   \t Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.JAVA_OBJECT) ),     Utils.getInteger(65535),\t    null, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), null, \t\t\tBoolean.FALSE, Boolean.FALSE, null, null, \t\t\t\t null, \t\t\t\t  null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.NUMERIC),         Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.NUMERIC) ),         Utils.getInteger(38),     \tnull, null, \"precision,scale\", \tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(38),null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}","{SQLTokenizer.getKeyWord(SQLTokenizer.INT),             Utils.getShort(SQLTokenizer.getSQLDataType( SQLTokenizer.INT) ),             Utils.getInteger(10),     \tnull, null, null, \t\t\t\tUtils.getShort(typeNullable), Boolean.FALSE, Utils.getShort(typeSearchable), Boolean.FALSE, Boolean.FALSE, Boolean.FALSE, null, Utils.getInteger(0), Utils.getInteger(0), null, null, null}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionLCase.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.06.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class ExpressionFunctionUCase extends ExpressionFunctionReturnP1StringAndBinary {\r\n\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.UCASE;\r\n\t}\r\n\r\n\r\n\tfinal boolean isNull() throws Exception {\r\n\t\treturn param1.isNull();\r\n\t}\r\n\r\n\r\n\tfinal byte[] getBytes() throws Exception{\r\n        if(isNull()) return null;\r\n        return getString().getBytes();\r\n\t}\r\n\t\r\n\t\r\n\tfinal String getString() throws Exception {\r\n\t\tif(isNull()) return null;\r\n\t\treturn param1.getString().toUpperCase();\r\n\t}\r\n}\r\n"]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionPower.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\n\r\nfinal class ExpressionFunctionPower extends ExpressionFunctionReturnFloat {\r\n\r\n    final int getFunction(){ return SQLTokenizer.POWER; }\r\n\r\n    boolean isNull() throws Exception{\r\n        return param1.isNull() || param2.isNull();\r\n    }\r\n\r\n    final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n        return Math.pow( param1.getDouble(), param2.getDouble() );\r\n    }\r\n}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Operatoren\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestOperatoren( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Operatoren\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestOperatoren( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Operatoren\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestOperatoren( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["protected void setUp() throws Exception{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"statement\");\r\n\t\tst.execute(\"Create Table statement (c varchar(30), i counter)\");\r\n\t\tinit = true;\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["int[] colTypes = {Types.VARCHAR, Types.SMALLINT, Types.INTEGER, Types.VARCHAR, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.BOOLEAN, Types.SMALLINT, Types.BOOLEAN, Types.BOOLEAN, Types.BOOLEAN, Types.NULL, Types.INTEGER, Types.INTEGER, Types.NULL, Types.NULL, Types.NULL };","int[] colTypes = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.VARCHAR, Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.INTEGER, Types.INTEGER, Types.INTEGER, Types.NULL, Types.VARCHAR, Types.NULL, Types.NULL, Types.INTEGER, Types.INTEGER, Types.VARCHAR};","int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };","int[] colTypes = {Types.SMALLINT, Types.VARCHAR, Types.INTEGER, Types.VARCHAR, Types.INTEGER, Types.NULL, Types.SMALLINT, Types.SMALLINT};","int[] colTypes = {Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL, Types.NULL };","int[] colTypes3 = {Types.VARCHAR, Types.NULL, Types.VARCHAR, Types.BOOLEAN, Types.NULL, Types.VARCHAR, Types.SMALLINT, Types.SMALLINT, Types.VARCHAR, Types.NULL, Types.NULL, Types.NULL, Types.NULL};"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["catch (SQLException ex) {\r\n\t\t\t\tresult[b] = EXECUTE_FAILED;\r\n\t\t\t\tif(failed == null){\r\n\t\t\t\t\tfailed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n\t\t\t\t\tfailed.initCause(ex);\r\n\t\t\t\t}\r\n\t\t\t\tfailed.setNextException(ex);\r\n\t\t\t}"]}},{"clone":{"code":["if(node.isEmpty()){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i);\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLastValue){\r\n\t\t\t\t\tnode.saveValue( rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}","if(node.isEmpty()){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.addRemainderKey( rowOffset, key, i );\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRootValue( key, i );\r\n\t\t\t}else\r\n\t\t\tif(equals(node.getRemainderValue(), key, i)){\r\n\t\t\t\tif(isLast){\r\n\t\t\t\t\tnode.saveValue(rowOffset);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\t\t\t\treturn node.addRoot();\r\n\t\t\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_VIEW);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}","@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_VIEW);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}"]}},{"clone":{"code":["static String bytes2hex( byte[] bytes ){\r\n        StringBuffer buf = new StringBuffer(bytes.length << 1);\r\n        for(int i=0; i<bytes.length; i++){\r\n            buf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n            buf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n        }\r\n        return buf.toString();\r\n    }"]}},{"clone":{"code":["if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}","if(status.nodeValue != null){\r\n\t\t\t\t\t\tif(status.nodeValue instanceof IndexNode){\r\n\t\t\t\t\t\t\tlevel++;\r\n\t\t\t\t\t\t\tnodeStack.push(\r\n\t\t\t\t\t\t\t\tnew IndexNodeScrollStatus( \t(IndexNode)status.nodeValue, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t(expressions.get(level).getAlias() != SQLTokenizer.DESC_STR), \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tscroll, level));\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}else\r\n\t\t\t\t\t\t\treturn getReturnValue(status.nodeValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//There is no RowOffset in this node"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMinute.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MINUTE;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMinute.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MINUTE;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMinute.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMinute extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MINUTE;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.minute;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.MONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.month+1;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":["{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < SQL_STATES.length; i++) {\r\n\t\t\tString key = SQL_STATES[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = SQL_STATES[i][1];\r\n\t\t\t\tsqlStates.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}","{\r\n\t\tSet inserted = new HashSet(); // for duplicates checking\r\n\t\t\r\n\t\tfor (int i = 0; i < entries.length; i++) {\r\n\t\t\tString key = entries[i][0];\r\n\t\t\t\r\n\t\t\tif (! inserted.add(key)) {\r\n\t\t\t\tthrow new IllegalArgumentException(\"Duplicate key: \" + key);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tString value = entries[i][1];\r\n\t\t\t\tmessages.put(key, value);\r\n\t\t\t}\r\n\t\t}\r\n\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["catch(SQLException ex){\r\n                result[i] = EXECUTE_FAILED;\r\n                if(failed == null){\r\n                    failed = new BatchUpdateException(ex.getMessage(), ex.getSQLState(), ex.getErrorCode(), result);\r\n                    failed.initCause(ex);\r\n                }\r\n                failed.setNextException(ex);\r\n            }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Joins\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestJoins( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Joins\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestJoins( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Joins\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestJoins( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","private static TestValue a(String dataType, Object small, Object large){\r\n        TestValue value = new TestValue();\r\n        value.dataType  = dataType;\r\n        value.small     = small;\r\n        value.large     = large;\r\n        return value;\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":["@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_TABLE);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}","@Override\r\n    void writeMagic(FileChannel raFile) throws Exception{\r\n        ByteBuffer buffer = ByteBuffer.allocate(8);\r\n        buffer.putInt(MAGIC_TABLE);\r\n        buffer.putInt(TABLE_VIEW_VERSION);\r\n        buffer.position(0);\r\n        raFile.write(buffer);\r\n\t}","if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }","if(serializeConnections.size() > 0){\r\n                        Iterator values = locks.values().iterator();\r\n                        while(values.hasNext()){\r\n                            TableStorePage lock = (TableStorePage)values.next();\r\n                            if(lock.con != con) return null;\r\n                        }\r\n                    }","if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}","if(serializeConnections.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}","// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}","// first check if another connection has a lock before creating a table lock\r\n\t\t\t\t\t\tif(locks.size() > 0){\r\n\t\t\t\t\t\t\tIterator values = locks.values().iterator();\r\n\t\t\t\t\t\t\twhile(values.hasNext()){\r\n\t\t\t\t\t\t\t\tTableStorePage lock = (TableStorePage)values.next();\r\n\t\t\t\t\t\t\t\tif(lock.con != con) return null;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}"]}},{"clone":{"code":["switch(operation){\r\n            case ADD:       return left.getInt() + right.getInt();\r\n            case SUB:       return left.getInt() - right.getInt();\r\n            case MUL:       return left.getInt() * right.getInt();\r\n            case DIV:       return left.getInt() / right.getInt();\r\n            case NEGATIVE:  return               - left.getInt();\r\n            case MOD:\t\treturn left.getInt() % right.getInt();\r\n            case BIT_NOT:   return               ~ left.getInt();\r\n        }","switch(operation){\r\n            case ADD: return left.getLong() + right.getLong();\r\n            case SUB: return left.getLong() - right.getLong();\r\n            case MUL: return left.getLong() * right.getLong();\r\n            case DIV: return left.getLong() / right.getLong();\r\n            case NEGATIVE:  return          - left.getLong();\r\n            case MOD:\t\treturn left.getLong() % right.getLong();\r\n            case BIT_NOT:   return          ~ right.getInt();\r\n        }"]}},{"clone":{"code":["public void testFirstWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","public void testFirstWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testFirstWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","public void testNextWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","public void testNextWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v\") );\r\n            testNextWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","public void testLastWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}","public void testLastWithWhere() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table Scrollable (i counter, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into Scrollable(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from Scrollable\");\r\n\t\t\tassertRowCount( 0, \"Select * from Scrollable Where 1=0\");\r\n\r\n\t\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select * from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Order By v\") );\r\n            testLastWithWhereAssert( st.executeQuery(\"Select v from Scrollable Where 1=0 Group By v Order By v\") );\r\n\t\t}finally{\r\n            dropTable( con, \"Scrollable\");\r\n\t\t}\r\n\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["final int getScale(){\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getScale());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}","final int getPrecision(){\r\n\t\tint precision = 0;\r\n\t\tfor(int i=results.size()-1; i>=0; i--){\r\n\t\t\tprecision = Math.max(precision, results.get(i).getPrecision());\r\n\t\t}\r\n\t\treturn precision;\r\n\t}"]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionLCase.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.06.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\npublic class ExpressionFunctionLCase extends ExpressionFunctionReturnP1StringAndBinary {\r\n\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.LCASE;\r\n\t}\r\n\r\n\r\n\tfinal boolean isNull() throws Exception {\r\n\t\treturn param1.isNull();\r\n\t}\r\n\r\n\r\n\tfinal byte[] getBytes() throws Exception{\r\n        if(isNull()) return null;\r\n        return getString().getBytes();\r\n\t}\r\n\t\r\n\t\r\n\tfinal String getString() throws Exception {\r\n\t\tif(isNull()) return null;\r\n\t\treturn param1.getString().toLowerCase();\r\n\t}\r\n}\r\n"]}},{"clone":{"code":["public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Exceptions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestExceptions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Exceptions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestExceptions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Exceptions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestExceptions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","private void init() throws Exception{\r\n    \tif(init) return;\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tdropTable( con, \"exceptions\");\r\n\t\tst.execute(\"Create Table exceptions (c varchar(30), i int)\");\r\n\t\tinit = true;\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int_asc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i Asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_Scollable() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_varchar_DescAsc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc, i asc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_varchar_desc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tString oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by v desc\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = rs.getString(\"v\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(oldValue != null && rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tif(newValue != null){\r\n\t\t\t\tassertTrue( oldValue.compareTo( newValue ) > 0 );\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\toldValue = newValue;\r\n\t\t}\r\n\t\tassertNull(oldValue);\r\n\t\tassertFalse( rs.next() );\r\n\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void test_bigint() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );\r\n\t\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void test_bigint() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );\r\n\t\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void test_bigint() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );\r\n\t\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void test_bigint() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tLong oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by bi\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Long)rs.getObject(\"bi\") ) < 0 );\r\n\t\t\toldValue = (Long)rs.getObject(\"bi\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_double() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tDouble oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) < 0 );\r\n\t\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_double() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tDouble oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) < 0 );\r\n\t\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_double() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tDouble oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) < 0 );\r\n\t\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_double() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tDouble oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by d\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Double)rs.getObject(\"d\") ) < 0 );\r\n\t\t\toldValue = (Double)rs.getObject(\"d\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"c\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}","while(rs.next()){\r\n\t\t\tString newValue = rs.getString(\"v\");\r\n\t\t\tassertTrue( oldValue + \"<\" + newValue, oldValue.compareTo( newValue ) < 0 );\r\n\t\t\toldValue = newValue;\r\n\t\t\tcount++;\r\n\t\t}","public void testOrderBy_real() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tFloat oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) < 0 );\r\n\t\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_real() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tFloat oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) < 0 );\r\n\t\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_real() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tFloat oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) < 0 );\r\n\t\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_real() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tFloat oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by r\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Float)rs.getObject(\"r\") ) < 0 );\r\n\t\t\toldValue = (Float)rs.getObject(\"r\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_int() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement();\r\n\t\tResultSet rs;\r\n\t\tInteger oldValue;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i\");\r\n\t\t\r\n\t\tassertTrue( rs.next() );\r\n\t\t\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\tassertNull(oldValue);\r\n\t\tassertTrue( rs.next() );\r\n\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\r\n\t\tint count = 1;\r\n\t\twhile(rs.next()){\r\n\t\t\tassertTrue( oldValue.compareTo( (Integer)rs.getObject(\"i\") ) < 0 );\r\n\t\t\toldValue = (Integer)rs.getObject(\"i\");\r\n\t\t\tcount++;\r\n\t\t}\r\n\t\tassertEquals( valueCount, count );\r\n\t}","public void testOrderBy_ScollableDesc() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tStatement st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);\r\n\t\tResultSet rs;\r\n\t\tint count;\r\n\t\t\r\n\t\trs = st.executeQuery(\"SELECT * FROM \" + table1 + \" ORDER  by i desc, d\");\r\n\t\t\r\n\t\t//jetzt irgendwo in die Mitte scrollen\r\n\t\trs.next();\r\n\t\trs.next();\r\n\t\trs.previous(); //dann soll der Zeiger nicht am Ende des bereits gefetchten stehen\r\n\t\t\r\n\t\trs.last();\r\n\t\tcount = 0;\r\n\t\twhile(rs.previous()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\r\n\t\trs.beforeFirst();\r\n\t\tcount = -1;\r\n\t\twhile(rs.next()) count++;\t\t\r\n\t\tassertEquals( valueCount, count );\r\n\t}"]}},{"clone":{"code":["public void testDuplicatedColumnInsert() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"INSERT INTO DuplicatedColumn(col,Col) Values(1,2)\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }","public void testDuplicatedColumnAlter() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        try{\r\n            Statement st = con.createStatement();\r\n            st.execute(\"Create Table DuplicatedColumn(col INT)\");\r\n            try{\r\n                st.execute(\"ALTER TABLE DuplicatedColumn Add Col INT\");\r\n                fail(\"SQLException 'Duplicated Column' should be throw\");\r\n            }catch(SQLException e){\r\n                assertSQLException(\"01000\", 0, e);\r\n            }\r\n        }finally{\r\n            dropTable(con, \"DuplicatedColumn\");\r\n        }\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFMONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFMONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfMonth extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFMONTH;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.day;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["private static String bytes2hex( byte[] bytes ){\r\n\t\tStringBuffer buf = new StringBuffer(bytes.length << 1);\r\n\t\tfor(int i=0; i<bytes.length; i++){\r\n\t\t\tbuf.append( digits[ (bytes[i] >> 4) & 0x0F ] );\r\n\t\t\tbuf.append( digits[ (bytes[i]     ) & 0x0F ] );\r\n\t\t}\r\n\t\treturn buf.toString();\r\n\t}","if(needTrim && obj2 != null){\r\n\t\t\t// trim for CHAR and BINARY\r\n\t\t\tif(obj2 instanceof String) obj2 = ((String)obj2).trim();\r\n\t\t\tif(obj2 instanceof byte[]){\r\n\t\t\t\tbyte[] tmp = (byte[])obj2;\r\n\t\t\t\tint k=tmp.length-1;\r\n\t\t\t\tfor(; k>= 0; k--) if(tmp[k] != 0) break;\r\n\t\t\t\tk++;\r\n\t\t\t\tbyte[] tmp2 = new byte[k];\r\n\t\t\t\tSystem.arraycopy( tmp, 0, tmp2, 0, k);\r\n\t\t\t\tobj2 = tmp2;\r\n\t\t\t}\r\n\t\t}","if(needTrim && obj1 != null){\r\n            // trim for CHAR and BINARY\r\n            if(obj1 instanceof String) obj1 = ((String)obj1).trim();\r\n            if(obj1 instanceof byte[]){\r\n                byte[] tmp = (byte[])obj1;\r\n                int k=tmp.length-1;\r\n                for(; k>= 0; k--) if(tmp[k] != 0) break;\r\n                k++;\r\n                byte[] tmp2 = new byte[k];\r\n                System.arraycopy( tmp, 0, tmp2, 0, k);\r\n                obj1 = tmp2;\r\n            }\r\n        }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public Object getObject(int columnIndex) throws SQLException {\r\n        try{\r\n            Object obj = getValue(columnIndex).getApiObject();\r\n            wasNull = obj == null;\r\n            return obj;\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal(scale);\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTime( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getDate( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex) throws SQLException {\r\n        try{\r\n\t\t\tExpression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n\t\t\tif(wasNull) return null;\r\n\t\t\treturn DateTime.getTimestamp( expr.getLong() );\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getDate(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Date getDate(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getDate(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Date(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTimestamp(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTimestamp(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Timestamp(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTime(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public Time getTime(int columnIndex, Calendar cal) throws SQLException {\r\n        try{\r\n            if(cal == null){\r\n                return getTime(columnIndex);\r\n            }\r\n            Expression expr = getValue(columnIndex);\r\n            wasNull = expr.isNull();\r\n            if(wasNull) return null;\r\n            return new Time(DateTime.addDateTimeOffset( expr.getLong(), cal.getTimeZone() ));\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }","public BigDecimal getBigDecimal(int columnIndex) throws SQLException {\r\n        try{\r\n            MutableNumeric obj = getValue(columnIndex).getNumeric();\r\n            wasNull = obj == null;\r\n            if(wasNull) return null;\r\n            return obj.toBigDecimal();\r\n        }catch(Exception e){\r\n            throw SmallSQLException.createFromException( e );\r\n        }\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionATan2.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n */\r\npackage smallsql.database;\r\n\r\n\r\nfinal class ExpressionFunctionATan2 extends ExpressionFunctionReturnFloat {\r\n\r\n    final int getFunction(){ return SQLTokenizer.ATAN2; }\r\n\r\n    boolean isNull() throws Exception{\r\n        return param1.isNull() || param2.isNull();\r\n    }\r\n\r\n    final double getDouble() throws Exception{\r\n\t\tif(isNull()) return 0;\r\n        return Math.atan2( param1.getDouble(), param2.getDouble() );\r\n    }\r\n}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Functions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestFunctions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Functions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestFunctions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }","public static Test suite() throws Exception{\r\n        TestSuite theSuite = new TestSuite(\"Functions\");\r\n        for(int i=0; i<TESTS.length; i++){\r\n            theSuite.addTest(new TestFunctions( TESTS[i] ) );\r\n        }\r\n        return theSuite;\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionHour.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionHour extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.HOUR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionHour.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionHour extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.HOUR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionHour.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionHour extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.HOUR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.hour;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionDayOfYear.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 16.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionDayOfYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.DAYOFYEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.dayofyear+1;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":["if (diff.size() > 0) {\r\n\t\t\t\tfailed = true;\r\n                msgBuf.append(\"\\nMissing entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n\t\t\t\t\r\n\t\t\t\tfor (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n\t\t\t\t\tmsgBuf.append(itr.next());\r\n\t\t\t\t\tif (itr.hasNext()) msgBuf.append(',');\r\n\t\t\t\t}\r\n\t\t\t}","if (diff.size() > 0) {\r\n                failed = true;\r\n                msgBuf.append(\"\\nAdditional entries for language \").append( OTHER_LANGUAGES[i] ).append(\": \");\r\n                \r\n                for (Iterator itr = diff.iterator(); itr.hasNext(); ) {\r\n                    msgBuf.append(itr.next());\r\n                    if (itr.hasNext()) msgBuf.append(',');\r\n                }\r\n            }"]}},{"clone":{"code":["public void testWithPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");\r\n        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }","public void testWithPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (keyField varchar(2) primary key)\");\r\n        st.execute(\"alter table \"+table+\" add anotherField varchar(4)\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"keyField\", \"anotherField\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }","public void testAddPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2))\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }","public void testAddPrimaryKey() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2))\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 1, rs );\r\n    }","public void testAdd2Keys() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 2, rs );\r\n    }","public void testAdd2Keys() throws Exception{\r\n        Connection con = AllTests.getConnection();\r\n        Statement st = con.createStatement();\r\n        st.execute(\"create table \"+table+\" (a varchar(2) unique)\");\r\n        st.execute(\"alter table \"+table+\" add b varchar(4) primary key\");\r\n        ResultSet rs = st.executeQuery(\"Select * From \" + table);\r\n        assertRSMetaData( rs, new String[]{\"a\", \"b\"},  new int[]{Types.VARCHAR, Types.VARCHAR} );\r\n        rs = con.getMetaData().getIndexInfo( null, null, table, false, false );\r\n        assertRowCount( 2, rs );\r\n    }"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["if(places > 0){\r\n\t\t\tfor(int i=0; i<places; i++){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue *= factor;\r\n\t\t}else{\r\n\t\t\tfor(int i=0; i>places; i--){\r\n\t\t\t\tfactor *= 10;\r\n\t\t\t}\r\n\t\t\tvalue /= factor;\r\n\t\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public void testRollback() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t    con.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","/**\r\n\t * In the table there is already one row that is commited.\r\n\t */\r\n\tpublic void testRollbackWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) (Select v From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.rollback();\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","/**\r\n\t * In the table there is already one row that is committed.\r\n\t */\r\n\tpublic void testCommitWithOneCommitRow() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions (Select * From transactions)\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","public void testReadCommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_COMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 0, rs2.getInt(1) );\r\n\t\t}finally{\r\n            dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}","public void testCommit() throws Exception{\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\ttry{\t\t\t\r\n\t\t\tcon.setAutoCommit(false);\r\n\t\t\tcon.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Values('qwert')\");\r\n\t\t\tassertRowCount( 1, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions(v) Select v From transactions\");\r\n\t\t\tassertRowCount( 2, \"Select * from transactions\");\r\n\r\n\t\t\tcon.createStatement().execute(\"Insert Into transactions Select * From transactions\");\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t\tcon.commit();\r\n\t\t\tassertRowCount( 4, \"Select * from transactions\");\r\n\t\t\t\r\n\t\t}finally{\r\n\t\t\ttry{\r\n\t\t\t\tcon.createStatement().execute(\"Drop Table transactions\");\r\n\t\t\t}catch(Throwable e){e.printStackTrace();}\r\n\t\t\tcon.setAutoCommit(true);\r\n\t\t}\r\n\t}","public void testReadUncommited() throws Exception{\r\n\t\tConnection con1 = AllTests.getConnection();\r\n\t\tConnection con2 = AllTests.createConnection();\r\n\t\ttry{\t\t\r\n\t\t\tcon2.setTransactionIsolation( Connection.TRANSACTION_READ_UNCOMMITTED );\r\n\t\t\tcon1.createStatement().execute(\"Create Table transactions (i int identity, v varchar(20))\");\r\n\t\t\tassertRowCount( 0, \"Select * from transactions\");\r\n\r\n\t\t\tcon1.setAutoCommit(false);\r\n\t\t\tcon1.createStatement().execute(\"Insert Into transactions(v) Values('qwert2')\");\r\n\r\n\t\t\tResultSet rs2 = con2.createStatement().executeQuery(\"Select count(*) from transactions\");\r\n\t\t\tassertTrue( rs2.next() );\r\n\t\t\tassertEquals( 1, rs2.getInt(1) );\r\n\t\t}finally{\r\n\t\t    dropTable(con1, \"transactions\");\r\n\t\t\tcon1.setAutoCommit(true);\r\n\t\t\tcon2.close();\r\n\t\t}\r\n\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["public void testComplex() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select abs(sum(abs(3-id))+2) FROM \" + table1 + \" Group By name+'a' Order By 'b'+(Name+'a')\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 5, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 4, rs.getInt(1));\r\n\t\t}\r\n\t}","public void testCountOrderBy() throws Exception{\r\n\t\tinit();\r\n\t\tConnection con = AllTests.getConnection();\r\n\t\tPreparedStatement pr = con.prepareStatement(\"Select count(*) FROM \" + table1 + \" Group By name Order By name DESC\");\r\n\t\tfor(int i=1; i<=3; i++){\r\n\t\t\tResultSet rs = pr.executeQuery( );\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 1, rs.getInt(1));\r\n\t\t\tassertTrue  ( \"loop:\"+i, rs.next());\r\n\t\t\tassertEquals( \"loop:\"+i, 3, rs.getInt(1));\r\n\t\t}\r\n\t}"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":["if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were found.\");\r\n                    return;\r\n                }\r\n            }","if (count != rowCount){\r\n                // There are not the correct count of rows.\r\n                if (count == 0){\r\n                    createTestDataWithClassicInsert( con );\r\n                    rs = st1.executeQuery( \"SELECT count(*) FROM \" + tableName);\r\n                    rs.next();\r\n                    count = rs.getInt(1);\r\n                }\r\n                if (count != rowCount){\r\n                    System.out.println( \"  Failed: Only \" + (rowCount-count) + \" rows were deleted.\");\r\n                    return;\r\n                }\r\n            }"]}},{"clone":{"code":[]}},{"clone":{"code":["/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.YEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.YEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}\r\n\r\n}\r\n","/* =============================================================\r\n * SmallSQL : a free Java DBMS library for the Java(tm) platform\r\n * =============================================================\r\n *\r\n * (C) Copyright 2004-2006, by Volker Berlin.\r\n *\r\n * Project Info:  http://www.smallsql.de/\r\n *\r\n * This library is free software; you can redistribute it and/or modify it \r\n * under the terms of the GNU Lesser General Public License as published by \r\n * the Free Software Foundation; either version 2.1 of the License, or \r\n * (at your option) any later version.\r\n *\r\n * This library is distributed in the hope that it will be useful, but \r\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY \r\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public \r\n * License for more details.\r\n *\r\n * You should have received a copy of the GNU Lesser General Public\r\n * License along with this library; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, \r\n * USA.  \r\n *\r\n * [Java is a trademark or registered trademark of Sun Microsystems, Inc. \r\n * in the United States and other countries.]\r\n *\r\n * ---------------\r\n * ExpressionFunctionMonth.java\r\n * ---------------\r\n * Author: Volker Berlin\r\n * \r\n * Created on 17.02.2006\r\n */\r\npackage smallsql.database;\r\n\r\n\r\n/**\r\n * @author Volker Berlin\r\n */\r\nfinal class ExpressionFunctionYear extends ExpressionFunctionReturnInt {\r\n\r\n\t\r\n\tfinal int getFunction() {\r\n\t\treturn SQLTokenizer.YEAR;\r\n\t}\r\n\t\r\n\r\n\tfinal int getInt() throws Exception {\r\n\t\tif(param1.isNull()) return 0;\r\n\t\tDateTime.Details details = new DateTime.Details(param1.getLong());\r\n\t\treturn details.year;\r\n\t}\r\n\r\n}\r\n"]}},{"clone":{"code":[]}},{"clone":{"code":[]}},{"clone":{"code":[]}}]